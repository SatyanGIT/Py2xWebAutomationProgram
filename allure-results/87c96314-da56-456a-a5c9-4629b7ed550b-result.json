{"name": "test_open_vwologin", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\n  (Session info: chrome=123.0.6312.123)\nStacktrace:\n\tGetHandleVerifier [0x00007FF681C77032+63090]\n\t(No symbol) [0x00007FF681BE2C82]\n\t(No symbol) [0x00007FF681A7EB1D]\n\t(No symbol) [0x00007FF681A6C76D]\n\t(No symbol) [0x00007FF681A6B100]\n\t(No symbol) [0x00007FF681A6B8BC]\n\t(No symbol) [0x00007FF681A814AD]\n\t(No symbol) [0x00007FF681B03D67]\n\t(No symbol) [0x00007FF681AE6FDA]\n\t(No symbol) [0x00007FF681B03412]\n\t(No symbol) [0x00007FF681AE6D83]\n\t(No symbol) [0x00007FF681AB83A8]\n\t(No symbol) [0x00007FF681AB9441]\n\tGetHandleVerifier [0x00007FF6820725AD+4238317]\n\tGetHandleVerifier [0x00007FF6820AF70D+4488525]\n\tGetHandleVerifier [0x00007FF6820A79EF+4456495]\n\tGetHandleVerifier [0x00007FF681D50576+953270]\n\t(No symbol) [0x00007FF681BEE54F]\n\t(No symbol) [0x00007FF681BE9224]\n\t(No symbol) [0x00007FF681BE935B]\n\t(No symbol) [0x00007FF681BD9B94]\n\tBaseThreadInitThunk [0x00007FFF08CC7344+20]\n\tRtlUserThreadStart [0x00007FFF08E826B1+33]", "trace": "@pytest.mark.smoke\n    def test_open_vwologin():\n        driver = webdriver.Chrome()       #open the session - POST Request\n        driver.get(\"https://app.vwo.com\")  # GET Request to URL Param\n>       driver.get(driver.title)\n\nsrc\\12042024\\test_lab005.py:9: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000155B6F3EFF0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument\\\\n  (Session info: chrome=1...07FF681BD9B94]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF08CC7344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFF08E826B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\nE         (Session info: chrome=123.0.6312.123)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF681C77032+63090]\nE       \t(No symbol) [0x00007FF681BE2C82]\nE       \t(No symbol) [0x00007FF681A7EB1D]\nE       \t(No symbol) [0x00007FF681A6C76D]\nE       \t(No symbol) [0x00007FF681A6B100]\nE       \t(No symbol) [0x00007FF681A6B8BC]\nE       \t(No symbol) [0x00007FF681A814AD]\nE       \t(No symbol) [0x00007FF681B03D67]\nE       \t(No symbol) [0x00007FF681AE6FDA]\nE       \t(No symbol) [0x00007FF681B03412]\nE       \t(No symbol) [0x00007FF681AE6D83]\nE       \t(No symbol) [0x00007FF681AB83A8]\nE       \t(No symbol) [0x00007FF681AB9441]\nE       \tGetHandleVerifier [0x00007FF6820725AD+4238317]\nE       \tGetHandleVerifier [0x00007FF6820AF70D+4488525]\nE       \tGetHandleVerifier [0x00007FF6820A79EF+4456495]\nE       \tGetHandleVerifier [0x00007FF681D50576+953270]\nE       \t(No symbol) [0x00007FF681BEE54F]\nE       \t(No symbol) [0x00007FF681BE9224]\nE       \t(No symbol) [0x00007FF681BE935B]\nE       \t(No symbol) [0x00007FF681BD9B94]\nE       \tBaseThreadInitThunk [0x00007FFF08CC7344+20]\nE       \tRtlUserThreadStart [0x00007FFF08E826B1+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidArgumentException"}, "start": 1713418862030, "stop": 1713418873518, "uuid": "d70c58a8-92b5-4155-8b0c-12ac49a66310", "historyId": "1f20689baeae64003331e2e12b5a8792", "testCaseId": "1f20689baeae64003331e2e12b5a8792", "fullName": "src.12042024.test_lab005#test_open_vwologin", "labels": [{"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "src.12042024"}, {"name": "suite", "value": "test_lab005"}, {"name": "host", "value": "DESKTOP-FO4TISR"}, {"name": "thread", "value": "11652-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.12042024.test_lab005"}]}